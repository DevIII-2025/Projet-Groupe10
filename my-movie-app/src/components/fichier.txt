// export const refreshToken = () => {
//     fetch('http://127.0.0.1:8000/api/token/refresh/', {
//       method: 'POST',
//       headers: { 'Content-Type': 'application/json' },
//       body: JSON.stringify({ refresh: localStorage.getItem('refresh') })
//     })
//     .then(res => res.json())
//     .then(data => localStorage.setItem('token', data.access))
//     .catch(() => {
//       localStorage.clear();
//       window.location = '/login';
//     });
//   }
  
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const EmailVerification = ({ email, onVerificationSuccess }) => {
    const [code, setCode] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();

    const handleVerification = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            await axios.post('/api/users/verify-email/', {
                email,
                code
            });

            onVerificationSuccess();
            navigate('/login');
        } catch (err) {
            setError(err.response?.data?.error || 'Une erreur est survenue');
        } finally {
            setLoading(false);
        }
    };

    const handleResendCode = async () => {
        setLoading(true);
        setError('');

        try {
            await axios.post('/api/users/resend-verification/', { email });
            setError('Un nouveau code a été envoyé à votre email');
        } catch (err) {
            setError(err.response?.data?.error || 'Une erreur est survenue');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-lg shadow-md">
            <h2 className="text-2xl font-bold mb-6 text-center">Vérification Email</h2>
            <p className="mb-4 text-gray-600 text-center">
                Un code de vérification a été envoyé à {email}
            </p>

            <form onSubmit={handleVerification} className="space-y-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700">
                        Code de vérification
                    </label>
                    <input
                        type="text"
                        value={code}
                        onChange={(e) => setCode(e.target.value)}
                        maxLength="6"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        placeholder="Entrez le code à 6 chiffres"
                        required
                    />
                </div>

                {error && (
                    <div className="text-red-500 text-sm bg-red-50 p-2 rounded">
                        {error}
                    </div>
                )}

                <button
                    type="submit"
                    disabled={loading}
                    className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-400"
                >
                    Vérifier
                </button>

                <button
                    type="button"
                    onClick={handleResendCode}
                    disabled={loading}
                    className="w-full mt-2 text-sm text-indigo-600 hover:text-indigo-500"
                >
                    Renvoyer le code
                </button>
            </form>
        </div>
    );
};

export default EmailVerification; 
import { useAuth } from "../context/AuthContext";
import { logout } from "../api/authAPI";

export default function Home() {
  const { user, setUser } = useAuth();

  const handleLogout = async () => {
    await logout();
    setUser(null);
  };

  return (
    <div>
      <h1>Welcome, {user?.username}!</h1>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
}
import React, { useState, useEffect } from 'react';
import { getList, removeMovieFromList } from '../api/listAPI';

const ListContent = ({ list, onBack }) => {
    const [listContent, setListContent] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (list?.id) {
            fetchListContent();
        }
    }, [list?.id]);

    const fetchListContent = async () => {
        try {
            console.log('Fetching list content for list:', list.id);
            const data = await getList(list.id);
            console.log('Received list content:', data);
            
            if (!data || !Array.isArray(data.movies)) {
                throw new Error('Format de données invalide');
            }
            
            setListContent(data);
            setError(null);
        } catch (err) {
            console.error('Error in fetchListContent:', err);
            setError(err.message || 'Erreur lors du chargement de la liste');
            setListContent(null);
        } finally {
            setLoading(false);
        }
    };

    const handleRemoveMovie = async (movieId) => {
        if (!window.confirm('Êtes-vous sûr de vouloir retirer ce film de la liste ?')) return;

        try {
            console.log('Removing movie:', movieId, 'from list:', list.id);
            await removeMovieFromList(list.id, movieId);
            
            setListContent(prev => ({
                ...prev,
                movies: prev.movies.filter(m => m.movie.id !== movieId)
            }));
            
            console.log('Movie removed successfully');
        } catch (err) {
            console.error('Error removing movie:', err);
            setError(err.message || 'Erreur lors de la suppression du film');
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center p-8">
                <div className="text-gray-600">Chargement de la liste...</div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                <div className="text-red-600 font-semibold">Erreur</div>
                <div className="text-red-500">{error}</div>
                <button
                    onClick={fetchListContent}
                    className="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200"
                >
                    Réessayer
                </button>
            </div>
        );
    }

    if (!listContent) {
        return (
            <div className="text-center text-gray-600 p-8">
                Liste non trouvée
                <button
                    onClick={onBack}
                    className="block mx-auto mt-4 px-4 py-2 text-blue-600 hover:text-blue-800"
                >
                    ← Retour aux listes
                </button>
            </div>
        );
    }

    return (
        <div className="w-full max-w-4xl mx-auto p-4">
            <div className="flex items-center justify-between mb-6">
                <div>
                    <h2 className="text-2xl font-bold">{listContent.name}</h2>
                    {listContent.description && (
                        <p className="text-gray-600 mt-1">{listContent.description}</p>
                    )}
                </div>
                <button
                    onClick={onBack}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                    ← Retour aux listes
                </button>
            </div>

            <div className="space-y-4">
                {listContent.movies && listContent.movies.length > 0 ? (
                    listContent.movies.map(({ movie, note }) => (
                        <div
                            key={movie.id}
                            className="flex items-start gap-4 p-4 bg-white rounded shadow hover:shadow-md transition-shadow"
                        >
                            <img
                                src={movie.poster_url}
                                alt={movie.title}
                                className="w-24 h-36 object-cover rounded"
                                onError={(e) => {
                                    e.target.src = '/placeholder-movie.jpg';
                                    e.target.onerror = null;
                                }}
                            />
                            <div className="flex-1">
                                <h3 className="text-xl font-semibold">{movie.title}</h3>
                                <p className="text-gray-600">
                                    {movie.release_year} • {movie.genre}
                                </p>
                                <p className="mt-2 text-gray-700">{movie.description}</p>
                                {note && (
                                    <p className="mt-2 text-sm text-gray-500">
                                        Note : {note}
                                    </p>
                                )}
                            </div>
                            <button
                                onClick={() => handleRemoveMovie(movie.id)}
                                className="px-3 py-1 text-red-500 hover:text-red-700"
                            >
                                Retirer
                            </button>
                        </div>
                    ))
                ) : (
                    <div className="text-center text-gray-500 py-8">
                        Cette liste est vide
                    </div>
                )}
            </div>
        </div>
    );
};

export default ListContent; 
import React, { useState, useEffect } from 'react';
import { getLists, createList, deleteList } from '../api/listAPI';

const Lists = ({ onSelectList }) => {
    const [lists, setLists] = useState([]);
    const [newListName, setNewListName] = useState('');
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetchLists();
    }, []);

    const fetchLists = async () => {
        try {
            console.log('Fetching lists...');
            const data = await getLists();
            console.log('Lists data received:', data);
            setLists(data);
        } catch (err) {
            console.error('Error fetching lists:', err);
            setError(err.message || 'Erreur lors du chargement des listes');
        } finally {
            setLoading(false);
        }
    };

    const handleCreateList = async (e) => {
        e.preventDefault();
        if (!newListName.trim()) return;

        try {
            console.log('Creating new list:', newListName);
            const newList = await createList(newListName);
            console.log('New list created:', newList);
            setLists([...lists, newList]);
            setNewListName('');
        } catch (err) {
            console.error('Error creating list:', err);
            setError(err.message || 'Erreur lors de la création de la liste');
        }
    };

    const handleDeleteList = async (listId) => {
        if (!window.confirm('Êtes-vous sûr de vouloir supprimer cette liste ?')) return;

        try {
            console.log('Deleting list:', listId);
            await deleteList(listId);
            console.log('List deleted successfully');
            setLists(lists.filter(list => list.id !== listId));
        } catch (err) {
            console.error('Error deleting list:', err);
            setError(err.message || 'Erreur lors de la suppression de la liste');
        }
    };

    if (loading) return <div className="text-center py-4">Chargement des listes...</div>;
    if (error) return (
        <div className="text-red-500 p-4 bg-red-50 rounded-lg">
            <p className="font-semibold">Erreur :</p>
            <p>{error}</p>
        </div>
    );

    return (
        <div className="w-full max-w-md mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">Mes Listes</h2>
            
            <form onSubmit={handleCreateList} className="mb-6">
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={newListName}
                        onChange={(e) => setNewListName(e.target.value)}
                        placeholder="Nouvelle liste..."
                        className="flex-1 p-2 border rounded"
                    />
                    <button
                        type="submit"
                        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                    >
                        Créer
                    </button>
                </div>
            </form>

            <div className="space-y-2">
                {lists.length === 0 ? (
                    <div className="text-center text-gray-500 py-4">
                        Vous n'avez pas encore de listes. Créez-en une !
                    </div>
                ) : (
                    lists.map(list => (
                        <div
                            key={list.id}
                            className="flex items-center justify-between p-3 bg-white rounded shadow hover:shadow-md transition-shadow"
                        >
                            <div
                                className="flex-1 cursor-pointer"
                                onClick={() => onSelectList(list)}
                            >
                                <h3 className="font-semibold">{list.name}</h3>
                                <p className="text-sm text-gray-500">
                                    {list.movies_count} films
                                </p>
                            </div>
                            <button
                                onClick={() => handleDeleteList(list.id)}
                                className="px-3 py-1 text-red-500 hover:text-red-700"
                            >
                                Supprimer
                            </button>
                        </div>
                    ))
                )}
            </div>
        </div>
    );
};

export default Lists; 
// import React, { useState } from 'react';

// export default function Login({ setToken }) {
//     const [username, setUsername] = useState('');
//     const [password, setPassword] = useState('');

//     const handleSubmit = (e) => {
//         e.preventDefault();
//         fetch('http://127.0.0.1:8000/api/token/', {
//             method: 'POST',
//             headers: { 'Content-Type': 'application/json' },
//             body: JSON.stringify({ username, password }),
//         })
//             .then(res => {
//                 if (!res.ok) throw new Error("Échec de connexion");
//                 return res.json();
//             })
//             .then(data => {
//                 localStorage.setItem('token', data.access);
//                 localStorage.setItem('refresh', data.refresh);
//                 window.location.reload();
//             })
//             .catch(err => alert(err));
//     };

//     return (
//         <form onSubmit={handleSubmit} className="flex flex-col w-80 mx-auto">
//             <input placeholder="Nom d'utilisateur" onChange={e => setUsername(e.target.value)} className="border p-2 rounded mb-2" />
//             <input type="password" placeholder="Mot de passe" onChange={e => setPassword(e.target.value)} className="border p-2 rounded mb-2" />
//             <button className="bg-blue-500 text-white rounded p-2">Se connecter</button>
//         </form>
//     );
// }
import { useState } from "react";
import { login, getMe } from "../api/authAPI";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";

export default function LoginForm() {
  const { setUser } = useAuth();
  const navigate = useNavigate();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleLogin = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      console.log("Tentative de connexion avec:", username);
      const loginResponse = await login(username, password);
      console.log("Réponse de login:", loginResponse.data);

      const userResponse = await getMe();
      console.log("Réponse de getMe:", userResponse.data);

      setUser(userResponse.data);
      navigate("/");
    } catch (err) {
      console.error("Erreur complète:", err);
      if (err.response) {
        // Le serveur a répondu avec un statut d'erreur
        setError(err.response.data.detail || "Échec de la connexion. Vérifiez vos identifiants.");
      } else if (err.request) {
        // La requête a été faite mais aucune réponse n'a été reçue
        setError("Impossible de contacter le serveur. Vérifiez votre connexion.");
      } else {
        // Une erreur s'est produite lors de la configuration de la requête
        setError("Une erreur est survenue lors de la tentative de connexion.");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-sm">
        <h2 className="text-3xl font-bold text-center text-blue-600 mb-6">
          Connexion
        </h2>
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        )}
        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-700">
              Nom d'utilisateur ou Email
            </label>
            <input
              type="text"
              placeholder="Username ou Email"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
              disabled={loading}
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-700">Mot de passe</label>
            <input
              type="password"
              placeholder="Mot de passe"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
              disabled={loading}
            />
          </div>
          <button
            type="submit"
            className={`w-full py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg ${
              loading ? 'opacity-50 cursor-not-allowed' : ''
            }`}
            disabled={loading}
          >
            {loading ? 'Connexion en cours...' : 'Se connecter'}
          </button>
        </form>
        <div className="mt-4 text-center">
          <p className="text-sm text-gray-600">
            Pas encore de compte ?{' '}
            <a href="/register" className="font-medium text-blue-600 hover:text-blue-500">
              S'inscrire
            </a>
          </p>
        </div>
      </div>
      <p className="mt-6 text-gray-500 text-sm">Accès réservé aux utilisateurs enregistrés 🔒</p>
    </div>
  );
}
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { logout } from '../api/authAPI';
import { useAuth } from '../context/AuthContext';

const LogoutButton = () => {
  const navigate = useNavigate();
  const { setUser } = useAuth();

  const handleLogout = async () => {
    try {
      await logout();
      setUser(null); // Réinitialiser l'état utilisateur dans le contexte
      navigate('/login');
    } catch (error) {
      console.error('Erreur lors de la déconnexion:', error);
      // En cas d'erreur, on force quand même la déconnexion côté client
      localStorage.removeItem('jwt_token');
      localStorage.removeItem('refresh_token');
      setUser(null);
      navigate('/login');
    }
  };

  return (
    <button
      onClick={handleLogout}
      className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg transition-colors duration-200"
    >
      Se déconnecter
    </button>
  );
};

export default LogoutButton; 
import React, { useState, useEffect } from 'react';
import { likeMovie, markMovieAsViewed, getLists, addMovieToList } from '../api/listAPI';

const MovieActions = ({ movie, onUpdate }) => {
    const [lists, setLists] = useState([]);
    const [selectedList, setSelectedList] = useState('');
    const [note, setNote] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [movieStatus, setMovieStatus] = useState({
        is_liked: false,
        is_viewed: false
    });

    useEffect(() => {
        fetchLists();
    }, []);

    const fetchLists = async () => {
        try {
            console.log('Fetching lists...');
            const data = await getLists();
            console.log('Lists received:', data);
            const userLists = data.filter(list => !list.is_system);
            setLists(userLists);
        } catch (err) {
            console.error('Error fetching lists:', err);
            setError('Erreur lors du chargement des listes');
        }
    };

    const handleLike = async () => {
        setLoading(true);
        setError(null);
        try {
            console.log('Liking movie:', movie.id);
            const result = await likeMovie(movie.id);
            console.log('Like result:', result);
            
            // Mettre à jour l'état local
            const newStatus = {
                ...movieStatus,
                is_liked: result.status === 'liked'
            };
            setMovieStatus(newStatus);
            
            // Mettre à jour l'état global
            onUpdate({
                ...movie,
                is_liked: result.status === 'liked'
            });
        } catch (err) {
            console.error('Error liking movie:', err);
            setError('Erreur lors du like');
        } finally {
            setLoading(false);
        }
    };

    const handleMarkAsViewed = async () => {
        setLoading(true);
        setError(null);
        try {
            console.log('Marking movie as viewed:', movie.id);
            const result = await markMovieAsViewed(movie.id);
            console.log('View result:', result);
            
            // Mettre à jour l'état local
            const newStatus = {
                ...movieStatus,
                is_viewed: true
            };
            setMovieStatus(newStatus);
            
            // Mettre à jour l'état global
            onUpdate({
                ...movie,
                is_viewed: true
            });
        } catch (err) {
            console.error('Error marking movie as viewed:', err);
            setError('Erreur lors du marquage comme vu');
        } finally {
            setLoading(false);
        }
    };

    const handleAddToList = async (e) => {
        e.preventDefault();
        if (!selectedList) return;

        setLoading(true);
        setError(null);
        try {
            console.log('Adding movie to list:', { listId: selectedList, movieId: movie.id, note });
            await addMovieToList(selectedList, movie.id, note);
            console.log('Movie added successfully');
            setNote('');
            setSelectedList('');
            // Rafraîchir la liste des listes
            fetchLists();
        } catch (err) {
            console.error('Error adding movie to list:', err);
            setError('Erreur lors de l\'ajout à la liste');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="space-y-4">
            <div className="flex gap-4">
                <button
                    onClick={handleLike}
                    disabled={loading}
                    className={`px-4 py-2 rounded transition-colors duration-200 ${
                        movieStatus.is_liked
                            ? 'bg-red-500 text-white hover:bg-red-600'
                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                >
                    {movieStatus.is_liked ? '❤️ Liké' : '🤍 Like'}
                </button>
                <button
                    onClick={handleMarkAsViewed}
                    disabled={loading || movieStatus.is_viewed}
                    className={`px-4 py-2 rounded transition-colors duration-200 ${
                        movieStatus.is_viewed
                            ? 'bg-green-500 text-white'
                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                >
                    {movieStatus.is_viewed ? '✓ Vu' : '👁️ Marquer comme vu'}
                </button>
            </div>

            <form onSubmit={handleAddToList} className="space-y-3">
                <select
                    value={selectedList}
                    onChange={(e) => setSelectedList(e.target.value)}
                    className="w-full p-2 border rounded focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    disabled={loading}
                >
                    <option value="">Sélectionner une liste...</option>
                    {lists.map(list => (
                        <option key={list.id} value={list.id}>
                            {list.name}
                        </option>
                    ))}
                </select>
                <textarea
                    value={note}
                    onChange={(e) => setNote(e.target.value)}
                    placeholder="Note (optionnelle)"
                    className="w-full p-2 border rounded focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    disabled={loading}
                />
                <button
                    type="submit"
                    disabled={!selectedList || loading}
                    className="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200"
                >
                    Ajouter à la liste
                </button>
            </form>

            {error && (
                <div className="text-red-500 text-sm bg-red-50 p-2 rounded">
                    {error}
                </div>
            )}
        </div>
    );
};

export default MovieActions; 
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";

export default function MovieDetails() {
  const { id } = useParams();
  const [movie, setMovie] = useState(null);

  useEffect(() => {
    fetch(`http://127.0.0.1:8000/api/movies/${id}/`)
      .then(res => res.json())
      .then(data => setMovie(data))
      .catch(err => console.error(err));
  }, [id]);

  if (!movie) return <p>Chargement...</p>;

  return (
    <div>
      <h1>{movie.title}</h1>
      <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title}/>
      <p>{movie.overview}</p>
      <p>Date de sortie : {movie.release_date}</p>
      <p>Note moyenne : {movie.vote_average}</p>
      <p>Nombre de votes : {movie.vote_count}</p>
    </div>
  );
}
import React, { useEffect, useState } from 'react';
import Modal from 'react-modal';
import MovieActions from './MovieActions';

// Configuration du modal
Modal.setAppElement('#root');

const customModalStyles = {
  content: {
    top: '50%',
    left: '50%',
    right: 'auto',
    bottom: 'auto',
    marginRight: '-50%',
    transform: 'translate(-50%, -50%)',
    maxWidth: '800px',
    width: '90%',
    maxHeight: '90vh',
    overflow: 'auto',
    padding: '2rem',
    borderRadius: '8px',
  },
  overlay: {
    backgroundColor: 'rgba(0, 0, 0, 0.75)'
  }
};

export default function MovieList() {
  const [movies, setMovies] = useState([]);
  const [selectedMovie, setSelectedMovie] = useState(null);
  const [modalIsOpen, setModalIsOpen] = useState(false);

  useEffect(() => {
    fetchMovies();
  }, []);

  const fetchMovies = async () => {
    try {
      const res = await fetch("http://127.0.0.1:8000/api/movies/");
      if (!res.ok) {
        throw new Error("Erreur lors du chargement des films");
      }
      const data = await res.json();
      setMovies(data);
    } catch (error) {
      console.error(error);
    }
  };

  const openModal = (movie) => {
    console.log("Film sélectionné :", movie);
    setSelectedMovie(movie);
    setModalIsOpen(true);
  };

  const closeModal = () => {
    setModalIsOpen(false);
    setSelectedMovie(null);
  };

  const handleMovieUpdate = (updatedMovie) => {
    setSelectedMovie(updatedMovie);
    setMovies(movies.map(movie => 
      movie.id === updatedMovie.id ? updatedMovie : movie
    ));
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">Liste des films</h1>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        {Array.isArray(movies) && movies.map(movie => (
          <div
            key={movie.id}
            onClick={() => openModal(movie)}
            className="cursor-pointer transition-transform hover:scale-105"
          >
            <div className="relative">
              <img
                src={movie.poster_url}
                alt={movie.title}
                className="w-full h-[300px] object-cover rounded-lg shadow-lg"
                onError={(e) => {
                  e.target.src = '/placeholder-movie.jpg';
                  e.target.onerror = null;
                }}
              />
              {movie.is_liked && (
                <span className="absolute top-2 right-2 text-red-500 text-2xl">❤️</span>
              )}
              {movie.is_viewed && (
                <span className="absolute top-2 left-2 text-green-500 text-xl">✓</span>
              )}
            </div>
            <h2 className="mt-2 text-lg font-semibold text-center">{movie.title}</h2>
          </div>
        ))}
      </div>

      <Modal
        isOpen={modalIsOpen}
        onRequestClose={closeModal}
        style={customModalStyles}
        contentLabel="Détails du film"
      >
        {selectedMovie && (
          <div className="relative">
            <button
              onClick={closeModal}
              className="absolute top-0 right-0 text-gray-600 hover:text-gray-800"
            >
              ✕
            </button>
            <div className="flex flex-col md:flex-row gap-6">
              <div className="md:w-1/3">
                <img
                  src={selectedMovie.poster_url}
                  alt={selectedMovie.title}
                  className="w-full rounded-lg shadow-lg"
                  onError={(e) => {
                    e.target.src = '/placeholder-movie.jpg';
                    e.target.onerror = null;
                  }}
                />
              </div>
              <div className="md:w-2/3">
                <h1 className="text-2xl font-bold mb-2">{selectedMovie.title}</h1>
                <p className="text-gray-600 mb-2">
                  {selectedMovie.release_year} • {selectedMovie.genre}
                </p>
                <p className="text-gray-700 mb-4">{selectedMovie.description}</p>
                
                <MovieActions
                  movie={selectedMovie}
                  onUpdate={handleMovieUpdate}
                />
              </div>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
}
// import React from 'react';
// import { Navigate } from 'react-router-dom';

// export default function PrivateRoute({ children }) {
//   const token = localStorage.getItem('token');
//   return token ? children : <Navigate to="/login"/>;
// }
import React from 'react';
import RegisterForm from './RegisterForm';

const Register = () => {
    return (
        <div>
            <RegisterForm />
        </div>
    );
};

export default Register; 
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const RegisterForm = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        username: '',
        email: '',
        password: '',
        password2: ''
    });
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');

    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess('');

        try {
            const response = await axios.post('http://localhost:8000/api/users/register/', formData);
            setSuccess('Inscription réussie ! Redirection...');
            setTimeout(() => {
                navigate('/login');
            }, 2000);
        } catch (err) {
            if (err.response) {
                // Le serveur a répondu avec un statut d'erreur
                const errorData = err.response.data;
                if (typeof errorData === 'object') {
                    // Si l'erreur est un objet, afficher le premier message d'erreur
                    const firstError = Object.values(errorData)[0];
                    setError(Array.isArray(firstError) ? firstError[0] : firstError);
                } else {
                    setError('Une erreur est survenue l\'inscription');
                }
            } else if (err.request) {
                // La requête a été faite mais aucune réponse n'a été reçue
                setError('Impossible de contacter le serveur');
            } else {
                // Une erreur s'est produite lors de la configuration de la requête
                setError('Une erreur est survenue');
            }
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-8">
                <div>
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                        Créer un compte
                    </h2>
                </div>
                <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
                    {error && (
                        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                            <span className="block sm:inline">{error}</span>
                        </div>
                    )}
                    {success && (
                        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                            <span className="block sm:inline">{success}</span>
                        </div>
                    )}
                    <div className="rounded-md shadow-sm -space-y-px">
                        <div>
                            <label htmlFor="username" className="sr-only">Nom d'utilisateur</label>
                            <input
                                id="username"
                                name="username"
                                type="text"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Nom d'utilisateur"
                                value={formData.username}
                                onChange={handleChange}
                            />
                        </div>
                        <div>
                            <label htmlFor="email" className="sr-only">Email</label>
                            <input
                                id="email"
                                name="email"
                                type="email"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Email"
                                value={formData.email}
                                onChange={handleChange}
                            />
                        </div>
                        <div>
                            <label htmlFor="password" className="sr-only">Mot de passe</label>
                            <input
                                id="password"
                                name="password"
                                type="password"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Mot de passe"
                                value={formData.password}
                                onChange={handleChange}
                            />
                        </div>
                        <div>
                            <label htmlFor="password2" className="sr-only">Confirmer le mot de passe</label>
                            <input
                                id="password2"
                                name="password2"
                                type="password"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="Confirmer le mot de passe"
                                value={formData.password2}
                                onChange={handleChange}
                            />
                        </div>
                    </div>

                    <div>
                        <button
                            type="submit"
                            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                            S'inscrire
                        </button>
                    </div>
                </form>
                <div className="text-center">
                    <p className="text-sm text-gray-600">
                        Déjà un compte ?{' '}
                        <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
                            Se connecter
                        </a>
                    </p>
                </div>
            </div>
        </div>
    );
};

export default RegisterForm; 
