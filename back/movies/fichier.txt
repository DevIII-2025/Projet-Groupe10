from django.contrib import admin
from .models import Movie, Review, List, MovieInList, Like, View

admin.site.register(Movie)
admin.site.register(Review)
admin.site.register(List)
admin.site.register(MovieInList)
admin.site.register(Like)
admin.site.register(View)

# from django.contrib import admin
# from .models import Movie

# class MovieAdmin(admin.ModelAdmin):
#     list_display = ('title', 'release_year', 'genre')
#     search_fields = ('title', 'genre')
#     list_filter = ('genre', 'release_year')

# admin.site.register(Movie, MovieAdmin)
from django.apps import AppConfig


class MoviesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'movies'
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

class Movie(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField()
    release_year = models.IntegerField()
    genre = models.CharField(max_length=100)
    poster_url = models.URLField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='movies_created')
    likes = models.ManyToManyField(User, through='Like', related_name='liked_movies')
    views = models.ManyToManyField(User, through='View', related_name='viewed_movies')

    def __str__(self):
        return f"{self.title} ({self.release_year})"

    class Meta:
        ordering = ['-created_at']

class List(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='lists')
    is_public = models.BooleanField(default=False)
    is_system = models.BooleanField(default=False)  # Pour les listes système comme "Déjà vu"
    movies = models.ManyToManyField(Movie, through='MovieInList', related_name='user_lists')

    def __str__(self):
        return f"{self.name} (par {self.created_by.username})"

    class Meta:
        ordering = ['-created_at']
        unique_together = ['name', 'created_by']

class MovieInList(models.Model):
    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)
    list = models.ForeignKey(List, on_delete=models.CASCADE)
    added_at = models.DateTimeField(auto_now_add=True)
    note = models.TextField(blank=True)  # Pour des notes personnelles sur le film dans la liste

    class Meta:
        unique_together = ['movie', 'list']
        ordering = ['-added_at']

class Like(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'movie']
        ordering = ['-created_at']

class View(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)
    viewed_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'movie']
        ordering = ['-viewed_at']

class Review(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    movie = models.ForeignKey(Movie, on_delete=models.CASCADE, related_name="reviews")
    rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])  # Note sur 5
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.user.username} on {self.movie.title}"
from rest_framework import serializers
from .models import Movie, List, MovieInList, Like, View, Review
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']

class MovieSerializer(serializers.ModelSerializer):
    is_liked = serializers.SerializerMethodField()
    is_viewed = serializers.SerializerMethodField()
    created_by = UserSerializer(read_only=True)

    class Meta:
        model = Movie
        fields = ['id', 'title', 'description', 'release_year', 'genre', 'poster_url', 
                 'created_at', 'updated_at', 'created_by', 'is_liked', 'is_viewed']
        read_only_fields = ['created_at', 'updated_at', 'created_by']

    def get_is_liked(self, obj):
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            return Like.objects.filter(user=request.user, movie=obj).exists()
        return False

    def get_is_viewed(self, obj):
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            return View.objects.filter(user=request.user, movie=obj).exists()
        return False

class MovieInListSerializer(serializers.ModelSerializer):
    movie = MovieSerializer(read_only=True)
    added_at = serializers.DateTimeField(read_only=True)
    note = serializers.CharField(required=False, allow_blank=True)

    class Meta:
        model = MovieInList
        fields = ['id', 'movie', 'added_at', 'note']
        read_only_fields = ['id', 'added_at']

    def to_representation(self, instance):
        representation = super().to_representation(instance)
        representation['movie'] = MovieSerializer(
            instance.movie,
            context=self.context
        ).data
        return representation

class ListSerializer(serializers.ModelSerializer):
    created_by = UserSerializer(read_only=True)
    movies_count = serializers.SerializerMethodField()

    class Meta:
        model = List
        fields = ['id', 'name', 'description', 'created_at', 'updated_at', 
                 'created_by', 'is_public', 'is_system', 'movies_count']
        read_only_fields = ['created_at', 'updated_at', 'created_by']

    def get_movies_count(self, obj):
        return obj.movies.count()

class ListDetailSerializer(ListSerializer):
    movies = serializers.SerializerMethodField()

    class Meta:
        model = List
        fields = ListSerializer.Meta.fields + ['movies']

    def get_movies(self, obj):
        movies_in_list = obj.movieinlist_set.select_related('movie').all()
        return MovieInListSerializer(
            movies_in_list,
            many=True,
            context=self.context
        ).data

class ReviewSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    movie = MovieSerializer(read_only=True)

    class Meta:
        model = Review
        fields = ['id', 'user', 'movie', 'rating', 'comment', 'created_at']
        read_only_fields = ['created_at']

class LikeSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    movie = MovieSerializer(read_only=True)

    class Meta:
        model = Like
        fields = ['id', 'user', 'movie', 'created_at']
        read_only_fields = ['created_at']

class ViewSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    movie = MovieSerializer(read_only=True)

    class Meta:
        model = View
        fields = ['id', 'user', 'movie', 'viewed_at']
        read_only_fields = ['viewed_at']
from django.test import TestCase

# Create your tests here.
# movies/tmdb.py
import requests
from django.conf import settings

BASE_URL = "https://api.themoviedb.org/3"

headers = {
    "accept": "application/json",
    "Authorization": f"Bearer {settings.TMDB_API_TOKEN}"
}

def discover_movies(page=1):
    url = f"{BASE_URL}/discover/movie?page={page}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()['results']
    return []

def get_movie_details(movie_id):
    url = f"{BASE_URL}/movie/{movie_id}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'movies', views.MovieViewSet, basename='movie')
router.register(r'lists', views.ListViewSet, basename='list')

urlpatterns = [
    path('', include(router.urls)),
]
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .tmdb import discover_movies, get_movie_details
from rest_framework import status
from .models import Movie, Review, List, MovieInList, Like, View
from .serializers import (
    MovieSerializer, ReviewSerializer, ListSerializer, ListDetailSerializer,
    MovieInListSerializer, LikeSerializer, ViewSerializer
)
from django.shortcuts import get_object_or_404
from rest_framework import viewsets, permissions
from rest_framework.decorators import action
import logging

logger = logging.getLogger(__name__)

@api_view(['GET', 'POST'])
def movie_list(request):
    if request.method == 'GET':
        movies = Movie.objects.all()
        serializer = MovieSerializer(movies, many=True)
        return Response(serializer.data)

    if request.method == 'POST':
        serializer = MovieSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
def tmdb_popular_movies(request):
    movies = discover_movies(page=1)
    return Response(movies)

@api_view(['GET'])
def movie_details(request, movie_id):
    movie = get_movie_details(movie_id)
    if movie:
        return Response(movie)
    return Response({"error": "Movie not found"}, status=status.HTTP_404_NOT_FOUND)

class MovieViewSet(viewsets.ModelViewSet):
    queryset = Movie.objects.all()
    serializer_class = MovieSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

    @action(detail=True, methods=['post'])
    def like(self, request, pk=None):
        movie = self.get_object()
        like, created = Like.objects.get_or_create(user=request.user, movie=movie)
        
        if created:
            # Créer ou récupérer la liste "Favoris"
            favorites_list, _ = List.objects.get_or_create(
                name="Favoris",
                created_by=request.user,
                is_system=True,
                defaults={'description': 'Films que vous avez aimés'}
            )
            # Ajouter le film à la liste des favoris
            MovieInList.objects.get_or_create(
                movie=movie,
                list=favorites_list,
                defaults={'note': 'Ajouté aux favoris automatiquement'}
            )
            logger.info(f"User {request.user.username} liked movie {movie.id}")
            serializer = MovieSerializer(movie, context={'request': request})
            return Response({
                'status': 'liked',
                'movie': serializer.data
            })
        else:
            # Si on unlike, on retire aussi de la liste des favoris
            like.delete()
            try:
                favorites_list = List.objects.get(
                    name="Favoris",
                    created_by=request.user,
                    is_system=True
                )
                MovieInList.objects.filter(
                    movie=movie,
                    list=favorites_list
                ).delete()
            except List.DoesNotExist:
                pass
            logger.info(f"User {request.user.username} unliked movie {movie.id}")
            serializer = MovieSerializer(movie, context={'request': request})
            return Response({
                'status': 'unliked',
                'movie': serializer.data
            })

    @action(detail=True, methods=['post'])
    def view(self, request, pk=None):
        movie = self.get_object()
        view, created = View.objects.get_or_create(user=request.user, movie=movie)
        if created:
            # Créer ou mettre à jour la liste "Déjà vu"
            watched_list, _ = List.objects.get_or_create(
                name="Déjà vu",
                created_by=request.user,
                is_system=True,
                defaults={'description': 'Films que vous avez vus'}
            )
            MovieInList.objects.get_or_create(
                movie=movie,
                list=watched_list,
                defaults={'note': 'Marqué comme vu automatiquement'}
            )
            logger.info(f"User {request.user.username} marked movie {movie.id} as viewed")
        
        serializer = MovieSerializer(movie, context={'request': request})
        return Response({
            'status': 'viewed',
            'movie': serializer.data
        })

class ListViewSet(viewsets.ModelViewSet):
    serializer_class = ListSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        logger.info(f"Fetching lists for user {self.request.user.username}")
        queryset = List.objects.filter(created_by=self.request.user).prefetch_related(
            'movies',
            'movieinlist_set',
            'movieinlist_set__movie'
        )
        logger.info(f"Found {queryset.count()} lists")
        return queryset

    def get_serializer_class(self):
        if self.action == 'retrieve':
            return ListDetailSerializer
        return ListSerializer

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

    @action(detail=True, methods=['post'])
    def add_movie(self, request, pk=None):
        list_obj = self.get_object()
        movie_id = request.data.get('movie_id')
        note = request.data.get('note', '')

        logger.info(f"Adding movie {movie_id} to list {list_obj.id} with note: {note}")

        if not movie_id:
            return Response(
                {'error': 'movie_id is required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            movie = get_object_or_404(Movie, id=movie_id)
            movie_in_list, created = MovieInList.objects.get_or_create(
                movie=movie,
                list=list_obj,
                defaults={'note': note}
            )

            if not created:
                movie_in_list.note = note
                movie_in_list.save()

            logger.info(f"Successfully {'added' if created else 'updated'} movie in list")
            
            serializer = MovieInListSerializer(
                movie_in_list,
                context={'request': request}
            )
            return Response(serializer.data)
            
        except Movie.DoesNotExist:
            logger.error(f"Movie {movie_id} not found")
            return Response(
                {'error': 'Film non trouvé'},
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            logger.error(f"Error adding movie to list: {str(e)}")
            return Response(
                {'error': 'Une erreur est survenue lors de l\'ajout du film à la liste'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    @action(detail=True, methods=['post'])
    def remove_movie(self, request, pk=None):
        list_obj = self.get_object()
        movie_id = request.data.get('movie_id')

        if not movie_id:
            return Response(
                {'error': 'movie_id is required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            movie_in_list = MovieInList.objects.get(
                movie_id=movie_id,
                list=list_obj
            )
            movie_in_list.delete()
            return Response({'status': 'success'})
        except MovieInList.DoesNotExist:
            return Response(
                {'error': 'Film non trouvé dans la liste'},
                status=status.HTTP_404_NOT_FOUND
            )
from django.core.management.base import BaseCommand
from movies.tmdb import discover_movies
from movies.models import Movie

class Command(BaseCommand):
    help = "Importer environ 100 films diversifiés depuis TMDB"

    def handle(self, *args, **options):
        total_imported = 0
        pages_needed = 5  # 5 pages x 20 films par page = 100 films

        for page in range(1, pages_needed + 1):
            movies = discover_movies(page=page)
            for movie_data in movies:
                Movie.objects.update_or_create(
                    title=movie_data['title'],
                    defaults={
                        'description': movie_data['overview'] or "Pas de description",
                        'release_year': movie_data['release_date'][:4] if movie_data['release_date'] else 0,
                        'genre': "Inconnu",
                        'poster_url': f"https://image.tmdb.org/t/p/w500{movie_data['poster_path']}" if movie_data['poster_path'] else ""
                    }
                )
                total_imported += 1

        self.stdout.write(self.style.SUCCESS(f"{total_imported} films importés avec succès !"))
# Generated by Django 5.1.6 on 2025-03-05 13:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('release_year', models.IntegerField()),
                ('genre', models.CharField(max_length=100)),
                ('poster_url', models.URLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
        ),
        migrations.CreateModel(
            name='MovieList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('movies', models.ManyToManyField(related_name='lists', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
# Generated by Django 5.1.6 on 2025-03-06 11:35

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('movies', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='movie',
            name='genre',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='movie',
            name='poster_url',
            field=models.URLField(blank=True, default=''),
        ),
    ]
# Generated by Django 5.1.6 on 2025-04-02 16:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('movies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='like',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='list',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_movies', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie',
            name='likes',
            field=models.ManyToManyField(related_name='liked_movies', through='movies.Like', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='list',
            name='movies',
            field=models.ManyToManyField(related_name='lists', to='movies.movie'),
        ),
        migrations.AddField(
            model_name='like',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie'),
        ),
        migrations.AddField(
            model_name='movieinlist',
            name='list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.list'),
        ),
        migrations.AddField(
            model_name='movieinlist',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie'),
        ),
        migrations.AddField(
            model_name='review',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='movies.movie'),
        ),
        migrations.AddField(
            model_name='review',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='view',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie'),
        ),
        migrations.AddField(
            model_name='view',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie',
            name='views',
            field=models.ManyToManyField(related_name='viewed_movies', through='movies.View', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='list',
            unique_together={('name', 'created_by')},
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'movie')},
        ),
        migrations.AlterUniqueTogether(
            name='movieinlist',
            unique_together={('movie', 'list')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'movie')},
        ),
        migrations.AlterUniqueTogether(
            name='view',
            unique_together={('user', 'movie')},
        ),
    ]
# Generated by Django 5.1.7 on 2025-03-31 20:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('movies', '0002_alter_movie_genre_alter_movie_poster_url'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RenameModel(
            old_name='FavoriteMovie',
            new_name='Like',
        ),
        migrations.AlterModelOptions(
            name='like',
            options={'ordering': ['-created_at']},
        ),
        migrations.AlterModelOptions(
            name='movie',
            options={'ordering': ['-created_at']},
        ),
        migrations.RenameField(
            model_name='like',
            old_name='added_at',
            new_name='created_at',
        ),
        migrations.AddField(
            model_name='movie',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movies_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie',
            name='likes',
            field=models.ManyToManyField(related_name='liked_movies', through='movies.Like', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='movie',
            name='genre',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='movie',
            name='poster_url',
            field=models.URLField(),
        ),
        migrations.AlterField(
            model_name='movie',
            name='title',
            field=models.CharField(max_length=200),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'movie')},
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('is_system', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MovieInList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField(blank=True)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.list')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
            options={
                'ordering': ['-added_at'],
                'unique_together': {('movie', 'list')},
            },
        ),
        migrations.AddField(
            model_name='list',
            name='movies',
            field=models.ManyToManyField(related_name='user_lists', through='movies.MovieInList', to='movies.movie'),
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
                'unique_together': {('user', 'movie')},
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='views',
            field=models.ManyToManyField(related_name='viewed_movies', through='movies.View', to=settings.AUTH_USER_MODEL),
        ),
        migrations.DeleteModel(
            name='MovieList',
        ),
        migrations.AlterUniqueTogether(
            name='list',
            unique_together={('name', 'created_by')},
        ),
    ]
