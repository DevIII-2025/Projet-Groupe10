"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.
"""

from pathlib import Path
import os
import subprocess

from datetime import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Function to get the current Git branch
def get_current_git_branch():
    try:
        # Run the git command to get the current branch
        branch = subprocess.check_output(
            ["git", "rev-parse", "--abbrev-ref", "HEAD"],
            cwd=BASE_DIR,  # Ensure the command runs in the project root
            text=True  # Decode the output as a string
        ).strip()
        return branch
    except subprocess.CalledProcessError:
        # If git command fails (e.g., not a Git repository), default to 'main'
        return "main"

# Determine the database file based on the Git branch
current_branch = get_current_git_branch()

print("current_branch:",current_branch)

# Chargement des variables d'environnement
if current_branch == "dev":
    load_dotenv(BASE_DIR / ".env.dev")
else:
    load_dotenv(BASE_DIR / ".env")


# Clé secrète Django (ne jamais exposer en prod)
SECRET_KEY = 'django-insecure-9%6v-es02t-b)=xxmxpk!^ym@+_ujle%%vpvy5qyqrigj@j6rs'

# Clé API TMDB depuis .env
TMDB_API_TOKEN = os.getenv('TMDB_API_TOKEN')
DATABASE_NAME = os.getenv('DATABASE_NAME')
# BACKEND_URL = os.getenv('BACKEND_URL')

# print("BACKEND_URL:",BACKEND_URL)


# DEBUG à désactiver en prod
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '149.202.49.197',
    'ovh2',
    '192.168.0.10',
]

# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Libs externes
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',

    # Apps internes
    'movies',
    'users',
]

# Middleware
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Important: AVANT CommonMiddleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Pour permettre à React d'accéder à l'API (à restreindre en prod)
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Frontend React local
    "http://localhost:3001",  # Frontend React local
    "http://149.202.49.197:3000",  # Frontend React sur le serveur
    "http://149.202.49.197:8000",  # Backend sur le serveur
    "http://192.168.0.10:3000",  # Backend sur le serveur
]

CORS_ALLOW_CREDENTIALS = True  # Important pour autoriser les cookies

# Configuration supplémentaire pour CORS
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Authentification REST avec JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# Configuration de SimpleJWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_COOKIE': 'access_token',  # Nom du cookie
    'AUTH_COOKIE_SECURE': False,  # True en prod avec HTTPS
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_PATH': '/',
    'AUTH_COOKIE_SAMESITE': 'Lax',
}

ROOT_URLCONF = 'backend.urls'

# Templates Django
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Base de données locale SQLite
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / DATABASE_NAME,
    }
}

# Validation des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalisation
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Fichiers statiques
STATIC_URL = 'static/'

# Clé par défaut des champs auto
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

